//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class TrackedUrlClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7116";
    }

    create(request: CreateTrackedUrlDto | undefined, signal?: AbortSignal | undefined): Promise<string> {
        let url_ = this.baseUrl + "/TrackedUrl";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ValidationError.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = resultData500 !== undefined ? resultData500 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    delete(request: string, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrackedUrl?";
        if (request === undefined || request === null)
            throw new Error("The parameter 'request' must be defined and cannot be null.");
        else
            url_ += "request=" + encodeURIComponent("" + request) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ValidationError.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = resultData500 !== undefined ? resultData500 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getLatestTrackingInformation(request: string, signal?: AbortSignal | undefined): Promise<TrackedUrlDto> {
        let url_ = this.baseUrl + "/TrackedUrl/GetLatestTrackingInformation?";
        if (request === undefined || request === null)
            throw new Error("The parameter 'request' must be defined and cannot be null.");
        else
            url_ += "request=" + encodeURIComponent("" + request) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLatestTrackingInformation(_response);
        });
    }

    protected processGetLatestTrackingInformation(response: Response): Promise<TrackedUrlDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TrackedUrlDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ValidationError.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = resultData500 !== undefined ? resultData500 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TrackedUrlDto>(null as any);
    }

    searchTrackedUrls(searchValue: string | undefined, sortBy: string | null | undefined, direction: SortByDirection | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, signal?: AbortSignal | undefined): Promise<ResultPaginatedOfTrackedUrlDto> {
        let url_ = this.baseUrl + "/TrackedUrl/SearchTrackedUrls?";
        if (searchValue === null)
            throw new Error("The parameter 'searchValue' cannot be null.");
        else if (searchValue !== undefined)
            url_ += "searchValue=" + encodeURIComponent("" + searchValue) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "sortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (direction !== undefined && direction !== null)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchTrackedUrls(_response);
        });
    }

    protected processSearchTrackedUrls(response: Response): Promise<ResultPaginatedOfTrackedUrlDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultPaginatedOfTrackedUrlDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ValidationError.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = resultData500 !== undefined ? resultData500 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultPaginatedOfTrackedUrlDto>(null as any);
    }
}

export class ValidationError {
    propertyName!: string;
    message!: string;
    attemptedValue?: any | undefined;

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            this.message = _data["message"];
            this.attemptedValue = _data["attemptedValue"];
        }
    }

    static fromJS(data: any): ValidationError {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["message"] = this.message;
        data["attemptedValue"] = this.attemptedValue;
        return data;
    }
}

export class CreateTrackedUrlDto {
    url!: string;
    totalResultsToCheck!: number;
    searchTerms!: string[];

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.totalResultsToCheck = _data["totalResultsToCheck"];
            if (Array.isArray(_data["searchTerms"])) {
                this.searchTerms = [] as any;
                for (let item of _data["searchTerms"])
                    this.searchTerms!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateTrackedUrlDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTrackedUrlDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["totalResultsToCheck"] = this.totalResultsToCheck;
        if (Array.isArray(this.searchTerms)) {
            data["searchTerms"] = [];
            for (let item of this.searchTerms)
                data["searchTerms"].push(item);
        }
        return data;
    }
}

export class TrackedUrlDto {
    id!: string;
    url!: string;
    totalResultsToCheck!: number;
    searchTerms!: SearchTermDto[];

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
            this.totalResultsToCheck = _data["totalResultsToCheck"];
            if (Array.isArray(_data["searchTerms"])) {
                this.searchTerms = [] as any;
                for (let item of _data["searchTerms"])
                    this.searchTerms!.push(SearchTermDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TrackedUrlDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrackedUrlDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        data["totalResultsToCheck"] = this.totalResultsToCheck;
        if (Array.isArray(this.searchTerms)) {
            data["searchTerms"] = [];
            for (let item of this.searchTerms)
                data["searchTerms"].push(item.toJSON());
        }
        return data;
    }
}

export class SearchTermDto {
    id!: string;
    term!: string;
    history!: SearchTermHistoryDto[];

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.term = _data["term"];
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(SearchTermHistoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchTermDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchTermDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["term"] = this.term;
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        return data;
    }
}

export class SearchTermHistoryDto {
    id!: string;
    date!: Date;
    searchEngineUsed!: SearchEngines;
    positions!: number[];

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.searchEngineUsed = _data["searchEngineUsed"];
            if (Array.isArray(_data["positions"])) {
                this.positions = [] as any;
                for (let item of _data["positions"])
                    this.positions!.push(item);
            }
        }
    }

    static fromJS(data: any): SearchTermHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchTermHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["searchEngineUsed"] = this.searchEngineUsed;
        if (Array.isArray(this.positions)) {
            data["positions"] = [];
            for (let item of this.positions)
                data["positions"].push(item);
        }
        return data;
    }
}

export enum SearchEngines {
    None = 0,
    Google = 1,
    Bing = 2,
}

export class Result {
    errors!: IValidationError[];
    status!: ResultStatus;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(IValidationError.fromJS(item));
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["status"] = this.status;
        return data;
    }
}

export class ResultPaginatedOfTrackedUrlDto extends Result {
    data!: TrackedUrlDto[];
    currentPage!: number;
    totalPages!: number;
    totalCount!: number;
    pageSize!: number;

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TrackedUrlDto.fromJS(item));
            }
            this.currentPage = _data["currentPage"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.pageSize = _data["pageSize"];
        }
    }

    static override fromJS(data: any): ResultPaginatedOfTrackedUrlDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultPaginatedOfTrackedUrlDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["currentPage"] = this.currentPage;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["pageSize"] = this.pageSize;
        super.toJSON(data);
        return data;
    }
}

export abstract class IValidationError {
    propertyName!: string;
    message!: string;
    attemptedValue?: any | undefined;

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            this.message = _data["message"];
            this.attemptedValue = _data["attemptedValue"];
        }
    }

    static fromJS(data: any): IValidationError {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IValidationError' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["message"] = this.message;
        data["attemptedValue"] = this.attemptedValue;
        return data;
    }
}

export enum ResultStatus {
    None = 0,
    Created = 1,
    Succeeded = 2,
    ValidationFailed = 3,
    Unauthorised = 4,
    InternalError = 5,
}

export enum SortByDirection {
    None = 0,
    Ascending = 1,
    Descending = 2,
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}